Imports System.IO

Public Class Form3
    ' Adjust these paths for your environment:
    Private ReadOnly winActorExe As String = "C:\Program Files (x86)\WinActor7\WinActor7.exe"
    'Private ReadOnly scenarioA As String = "D:\WinActor\KP26.ums7"
    'Private ReadOnly scenarioB As String = "D:\WinActor\S_ALR_87008275.ums7"

    Private ReadOnly scenarioA As String = "D:\Coefficient\KP26.ums7"
    Private ReadOnly scenarioB As String = "D:\Coefficient\S_ALR_87008275.ums7"

    Private Async Sub btnScenario1_Click(sender As Object, e As EventArgs) Handles btnScenario1.Click
        Await RunWinActorScenarioAsync(scenarioA)
    End Sub

    Private Async Sub btnScenario2_Click(sender As Object, e As EventArgs) Handles btnScenario2.Click
        Await RunWinActorScenarioAsync(scenarioB)
    End Sub

    Private Async Function RunWinActorScenarioAsync(scnPath As String) As Task
        ' (Optional) Avoid starting when WinActor is already running
        If Process.GetProcessesByName("wa7").Any() Then
            MessageBox.Show("WinActor is already running. Please close it before starting a new scenario.")
            Return
        End If

        ' Configure the process start info
        Dim psi As New ProcessStartInfo() With {
            .FileName = winActorExe,
            .Arguments = $"-f ""{scnPath}"" -r -e -t", ' open, run, exit, minimize to tray
            .UseShellExecute = False,
            .CreateNoWindow = False,
            .WorkingDirectory = IO.Path.GetDirectoryName(winActorExe)
        }

        ' UI: show loading & disable buttons during run
        pbLoading.Visible = True
        btnScenario1.Enabled = False
        btnScenario2.Enabled = False

        Try
            Dim p As Process = Process.Start(psi)
            If p Is Nothing Then
                Throw New InvalidOperationException("WinActor process failed to start.")
            End If

            ' Wait without blocking the UI thread
            Await Task.Run(Sub() p.WaitForExit())
        Catch ex As Exception
            MessageBox.Show($"Failed to start or run WinActor: {ex.Message}")
        Finally
            ' UI: hide loading & re-enable buttons
            pbLoading.Visible = False
            btnScenario1.Enabled = True
            btnScenario2.Enabled = True
        End Try
    End Function

    Private Sub btnSAPLogin_MouseEnter(sender As Object, e As EventArgs) Handles btnSAPLogin.MouseEnter
        btnSAPLogin.BackColor = Color.FromArgb(55, 71, 79)
    End Sub

    Private Sub btnSAPLogin_MouseLeave(sender As Object, e As EventArgs) Handles btnSAPLogin.MouseLeave
        btnSAPLogin.BackColor = Color.FromArgb(55, 71, 79)
    End Sub

    Private Sub btnTemplate_MouseEnter(sender As Object, e As EventArgs) Handles btnTemplate.MouseEnter
        btnTemplate.BackColor = Color.FromArgb(55, 71, 79)
    End Sub

    Private Sub btnTemplate_MouseLeave(sender As Object, e As EventArgs) Handles btnTemplate.MouseLeave
        btnTemplate.BackColor = Color.FromArgb(55, 71, 79)
    End Sub

    Private Sub btnClose_Click(sender As Object, e As EventArgs) Handles btnClose.Click
        End
    End Sub

    Private Sub btnSAPLogin_Click(sender As Object, e As EventArgs) Handles btnSAPLogin.Click
        Form4.Show()
    End Sub

    Private Sub btnTemplate_Click(sender As Object, e As EventArgs) Handles btnTemplate.Click

        Using ofd As New OpenFileDialog()
            ofd.Title = "Select an Excel File"
            ofd.Filter = "Excel Files (*.xlsx;*.xls;*.xlsm)|*.xlsx;*.xls;*.xlsm"
            ofd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
            ofd.RestoreDirectory = True

            If ofd.ShowDialog() = DialogResult.OK Then
                Dim sourceFile As String = ofd.FileName
                Dim destinationFolder As String = "D:\Coefficient\Template"

                Try
                    ' Ensure destination folder exists
                    If Not Directory.Exists(destinationFolder) Then
                        Directory.CreateDirectory(destinationFolder)
                    End If

                    ' Purge ALL Excel files in the destination folder (Option B)
                    ' Set includeSubfolders:=True if you also want to clear subfolders.
                    PurgeExcelFiles(destinationFolder, includeSubfolders:=False)

                    ' Destination path (same filename as source)
                    Dim destinationFile As String = Path.Combine(destinationFolder, Path.GetFileName(sourceFile))

                    ' Copy file (no overwrite needed since we purged)
                    File.Copy(sourceFile, destinationFile, overwrite:=False)

                    MessageBox.Show("File copied to: " & destinationFile, "Coefficient Inputting Automation",
                                MessageBoxButtons.OK, MessageBoxIcon.Information)

                Catch ex As UnauthorizedAccessException
                    MessageBox.Show("Access denied. Check folder permissions or if files are read-only." &
                                Environment.NewLine & ex.Message,
                                "Permission Error", MessageBoxButtons.OK, MessageBoxIcon.Error)

                Catch ex As IOException
                    ' Common reasons: destination files in use/locked, disk issues
                    MessageBox.Show("I/O error. Make sure no files in the destination are open in Excel and try again." &
                                Environment.NewLine & ex.Message,
                                "I/O Error", MessageBoxButtons.OK, MessageBoxIcon.Error)

                Catch ex As Exception
                    MessageBox.Show("An unexpected error occurred:" & Environment.NewLine & ex.Message,
                                "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                End Try
            End If
        End Using

    End Sub

    Private Sub PurgeExcelFiles(folder As String, Optional includeSubfolders As Boolean = False)
        Dim patterns As String() = {
            "*.xlsx", "*.xls", "*.xlsm",
            "~$*.xlsx", "~$*.xls", "~$*.xlsm" ' Excel temp/lock files
        }

        Dim searchOpt As SearchOption =
            If(includeSubfolders, SearchOption.AllDirectories, SearchOption.TopDirectoryOnly)

        For Each pattern In patterns
            For Each filePath In Directory.EnumerateFiles(folder, pattern, searchOpt)
                Try
                    ' Clear read-only if set
                    Dim attrs = File.GetAttributes(filePath)
                    If (attrs And FileAttributes.ReadOnly) = FileAttributes.ReadOnly Then
                        File.SetAttributes(filePath, attrs And Not FileAttributes.ReadOnly)
                    End If

                    File.Delete(filePath)

                Catch ex As IOException
                    ' Likely file in use; skip and continue.
                    ' (Optionally log ex.Message)
                Catch ex As UnauthorizedAccessException
                    ' Permission issue; skip and continue.
                    ' (Optionally log ex.Message)
                End Try
            Next
        Next
    End Sub

    Private Sub Form3_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.Text = "Coefficient Inputting Automation"
    End Sub

    Private Sub btnMinimized_Click(sender As Object, e As EventArgs) Handles btnMinimized.Click
        Me.WindowState = FormWindowState.Minimized
    End Sub
End Class


-- Update 12:51PM
Got it üëç You want to:

1. Save the timestamp (current date & time) to a .txt file after copying the Excel file.


2. Read that timestamp from the file when needed.


3. Display it in a Label on your form.



Here‚Äôs how you can extend your code:


---

üîπ Step 1: Add helper functions

Private Sub SaveTimestamp(filePath As String)
    Dim timestamp As String = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
    File.WriteAllText(filePath, timestamp)
End Sub

Private Function ReadTimestamp(filePath As String) As String
    If File.Exists(filePath) Then
        Return File.ReadAllText(filePath)
    Else
        Return "No timestamp found."
    End If
End Function


---

üîπ Step 2: Update your btnTemplate_Click after copying the file

Inside this part:

' Copy file (no overwrite needed since we purged)
File.Copy(sourceFile, destinationFile, overwrite:=False)

' Save timestamp to a .txt file
Dim logFile As String = Path.Combine(destinationFolder, "LastCopied.txt")
SaveTimestamp(logFile)

' Read and display in a Label
lblLastCopied.Text = "Last copied: " & ReadTimestamp(logFile)

MessageBox.Show("File copied to: " & destinationFile, "Coefficient Inputting Automation",
                MessageBoxButtons.OK, MessageBoxIcon.Information)


---

üîπ Step 3: Show last timestamp on form load (optional)

If you want the label to always show the last saved time when the app starts:

Private Sub Form3_Load(sender As Object, e As EventArgs) Handles MyBase.Load
    Me.Text = "Coefficient Inputting Automation"

    Dim logFile As String = "D:\Coefficient\Template\LastCopied.txt"
    lblLastCopied.Text = "Last copied: " & ReadTimestamp(logFile)
End Sub


---

üîπ Step 4: Add a Label in your form (Designer)

Friend WithEvents lblLastCopied As Label

Or in the Designer, drag a Label ‚Üí set Name = lblLastCopied.


---

‚úÖ Now:

When you copy a template file, the current date/time is saved in LastCopied.txt.

The label (lblLastCopied) automatically shows the last copied timestamp.



---

Do you want me to integrate this directly into your full code (with the changes in btnTemplate_Click and Form3_Load), so you can just copy-paste it?


-- Update 0918 0518AM
Perfect ‚Äî that‚Äôs the best way to avoid hardcoded paths üëç
We‚Äôll create an App.config file for your project and move things like:

winActorExe path

scenarioA path

scenarioB path

destinationFolder path

logFile path



---

üîπ Step 1: Create an App.config

In your project, right-click ‚Üí Add ‚Üí New Item ‚Üí Application Configuration File ‚Üí App.config

Here‚Äôs a sample:

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- WinActor Executable -->
    <add key="WinActorExe" value="C:\Program Files (x86)\WinActor7\WinActor7.exe" />

    <!-- Scenarios -->
    <add key="ScenarioA" value="D:\Coefficient\KP26.ums7" />
    <add key="ScenarioB" value="D:\Coefficient\S_ALR_87008275.ums7" />

    <!-- Excel Template Folder -->
    <add key="DestinationFolder" value="D:\Coefficient\Template" />

    <!-- Log file for last copied timestamp -->
    <add key="LogFile" value="D:\Coefficient\Template\LastCopied.txt" />
  </appSettings>
</configuration>


---

üîπ Step 2: Read from App.config in your code

At the top of your Form3.vb:

Imports System.Configuration

Then replace your Private ReadOnly ... paths with this:

' Read values from App.config
Private ReadOnly winActorExe As String = ConfigurationManager.AppSettings("WinActorExe")
Private ReadOnly scenarioA As String = ConfigurationManager.AppSettings("ScenarioA")
Private ReadOnly scenarioB As String = ConfigurationManager.AppSettings("ScenarioB")
Private ReadOnly destinationFolder As String = ConfigurationManager.AppSettings("DestinationFolder")
Private ReadOnly logFile As String = ConfigurationManager.AppSettings("LogFile")


---

üîπ Step 3: Update your Template Button code

Inside btnTemplate_Click, replace this part:

' Save timestamp to a .txt file
SaveTimestamp(logFile)

' Read and display in a Label
lblLastCopied.Text = "Last copied: " & ReadTimestamp(logFile)


---

üîπ Step 4: Show last timestamp when Form loads

Private Sub Form3_Load(sender As Object, e As EventArgs) Handles MyBase.Load
    Me.Text = "Coefficient Inputting Automation"

    lblLastCopied.Text = "Last copied: " & ReadTimestamp(logFile)
End Sub


---

‚úÖ Now everything (paths + log file) is configurable in App.config.
If you ever need to move folders or change paths, just update App.config ‚Äî no need to recompile.


---

Do you want me to merge everything (with the timestamp save/read + App.config integration) into your full Form3.vb so you can copy-paste it directly?

