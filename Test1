Alright üöÄ let me put it all together so you‚Äôll have a complete solution with:

1. The stored procedure (sp_TapAttendance)


2. The ASPX page (TappingAttendance.aspx)


3. The code-behind (TappingAttendance.aspx.cs)


4. The Web.config DB connection string




---

1Ô∏è‚É£ Stored Procedure (SQL Server)

Run this in your SQL Server database:

CREATE PROCEDURE sp_TapAttendance
    @meetingid INT,
    @cardserialno NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if record already exists
    IF EXISTS (SELECT 1 FROM tbl_participants WHERE meetingid=@meetingid AND cardserialno=@cardserialno)
    BEGIN
        -- If TimeOut is still NULL, set it
        IF EXISTS (SELECT 1 FROM tbl_participants 
                   WHERE meetingid=@meetingid AND cardserialno=@cardserialno AND timein IS NOT NULL AND timeout IS NULL)
        BEGIN
            UPDATE tbl_participants
            SET timeout = GETDATE()
            WHERE meetingid=@meetingid AND cardserialno=@cardserialno;

            SELECT 'TimeOut recorded successfully!' AS Message;
        END
        ELSE
        BEGIN
            SELECT 'Attendance already completed.' AS Message;
        END
    END
    ELSE
    BEGIN
        -- First Tap -> Insert as TimeIn
        INSERT INTO tbl_participants (meetingid, cardserialno, timein)
        VALUES (@meetingid, @cardserialno, GETDATE());

        SELECT 'TimeIn recorded successfully!' AS Message;
    END
END


---

2Ô∏è‚É£ TappingAttendance.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="TappingAttendance.aspx.cs" Inherits="YourProject.TappingAttendance" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Attendance</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <div class="card shadow p-4">
            <h3 class="mb-3">Meeting Attendance Tapping</h3>

            <!-- Hidden Meeting ID -->
            <asp:HiddenField ID="hfMeetingID" runat="server" />

            <div class="mb-3">
                <label class="form-label">Card Serial Number</label>
                <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control" placeholder="Tap/Enter Card Serial No"></asp:TextBox>
            </div>

            <asp:Button ID="btnTap" runat="server" Text="Submit Tap" CssClass="btn btn-primary" OnClick="btnTap_Click" />

            <div class="mt-3">
                <asp:Label ID="lblMessage" runat="server" CssClass="fw-bold text-success"></asp:Label>
            </div>
        </div>
    </form>
</body>
</html>


---

3Ô∏è‚É£ TappingAttendance.aspx.cs

using System;
using System.Configuration;
using System.Data.SqlClient;

namespace YourProject
{
    public partial class TappingAttendance : System.Web.UI.Page
    {
        string connStr = ConfigurationManager.ConnectionStrings["MyDBConn"].ConnectionString;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                // Example: Meeting ID from QueryString
                if (!string.IsNullOrEmpty(Request.QueryString["meetingid"]))
                {
                    hfMeetingID.Value = Request.QueryString["meetingid"];
                }
                else
                {
                    lblMessage.Text = "No Meeting ID found!";
                    lblMessage.CssClass = "text-danger";
                }
            }
        }

        protected void btnTap_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(hfMeetingID.Value) || string.IsNullOrEmpty(txtCardSerial.Text))
            {
                lblMessage.Text = "Meeting ID or Card Serial missing!";
                lblMessage.CssClass = "text-danger";
                return;
            }

            using (SqlConnection con = new SqlConnection(connStr))
            {
                SqlCommand cmd = new SqlCommand("sp_TapAttendance", con);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@meetingid", hfMeetingID.Value);
                cmd.Parameters.AddWithValue("@cardserialno", txtCardSerial.Text);

                con.Open();
                var result = cmd.ExecuteScalar(); // Gets the SELECT message from SP
                lblMessage.Text = result != null ? result.ToString() : "No response from server.";
            }

            txtCardSerial.Text = "";
        }
    }
}


---

4Ô∏è‚É£ Web.config

Make sure you add your DB connection string:

<configuration>
  <connectionStrings>
    <add name="MyDBConn" 
         connectionString="Data Source=YOUR_SERVER;Initial Catalog=YOUR_DATABASE;Integrated Security=True" 
         providerName="System.Data.SqlClient"/>
  </connectionStrings>
</configuration>


---

‚úÖ Flow is now:

User taps card ‚Üí enters Card Serial No

Page calls stored procedure

Stored procedure handles:

Insert first tap = TimeIn

Update second tap = TimeOut

Ignore extra taps




---

Would you like me to also add a DataTable attendance list below the tap form so you can instantly see who already tapped in/out for that meeting?


---
08/23/25
Got it üëç you‚Äôd like to manually choose between Tap In and Tap Out using radio buttons instead of auto-deciding in SQL.

That means:

User selects Tap In or Tap Out

System will insert/update accordingly in tbl_participants

Stored procedure will check what user selected



---

1Ô∏è‚É£ Updated Stored Procedure

We‚Äôll pass an extra parameter @tapType (IN or OUT):

CREATE PROCEDURE sp_TapAttendance
    @meetingid INT,
    @cardserialno NVARCHAR(50),
    @tapType NVARCHAR(10)  -- 'IN' or 'OUT'
AS
BEGIN
    SET NOCOUNT ON;

    IF @tapType = 'IN'
    BEGIN
        -- Only insert TimeIn if not exists
        IF NOT EXISTS (SELECT 1 FROM tbl_participants WHERE meetingid=@meetingid AND cardserialno=@cardserialno)
        BEGIN
            INSERT INTO tbl_participants (meetingid, cardserialno, timein)
            VALUES (@meetingid, @cardserialno, GETDATE());

            SELECT 'Time In recorded successfully!' AS Message;
        END
        ELSE
        BEGIN
            SELECT 'This card already tapped in.' AS Message;
        END
    END
    ELSE IF @tapType = 'OUT'
    BEGIN
        -- Update TimeOut if TimeIn exists and Timeout still NULL
        IF EXISTS (SELECT 1 FROM tbl_participants 
                   WHERE meetingid=@meetingid AND cardserialno=@cardserialno AND timein IS NOT NULL AND timeout IS NULL)
        BEGIN
            UPDATE tbl_participants
            SET timeout = GETDATE()
            WHERE meetingid=@meetingid AND cardserialno=@cardserialno;

            SELECT 'Time Out recorded successfully!' AS Message;
        END
        ELSE
        BEGIN
            SELECT 'Cannot record Time Out (no Time In or already Time Out).' AS Message;
        END
    END
END


---

2Ô∏è‚É£ ASPX Page with Radio Buttons

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="TappingAttendance.aspx.cs" Inherits="YourProject.TappingAttendance" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Attendance</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <div class="card shadow p-4">
            <h3 class="mb-3">Meeting Attendance Tapping</h3>

            <!-- Hidden Meeting ID -->
            <asp:HiddenField ID="hfMeetingID" runat="server" />

            <div class="mb-3">
                <label class="form-label">Card Serial Number</label>
                <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control" placeholder="Tap/Enter Card Serial No"></asp:TextBox>
            </div>

            <div class="mb-3">
                <label class="form-label">Select Tap Type</label><br />
                <asp:RadioButtonList ID="rblTapType" runat="server" RepeatDirection="Horizontal" CssClass="form-check">
                    <asp:ListItem Text="Tap In" Value="IN" Selected="True" />
                    <asp:ListItem Text="Tap Out" Value="OUT" />
                </asp:RadioButtonList>
            </div>

            <asp:Button ID="btnTap" runat="server" Text="Submit Tap" CssClass="btn btn-primary" OnClick="btnTap_Click" />

            <div class="mt-3">
                <asp:Label ID="lblMessage" runat="server" CssClass="fw-bold text-success"></asp:Label>
            </div>
        </div>
    </form>
</body>
</html>


---

3Ô∏è‚É£ Code Behind (TappingAttendance.aspx.cs)

using System;
using System.Configuration;
using System.Data.SqlClient;

namespace YourProject
{
    public partial class TappingAttendance : System.Web.UI.Page
    {
        string connStr = ConfigurationManager.ConnectionStrings["MyDBConn"].ConnectionString;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (!string.IsNullOrEmpty(Request.QueryString["meetingid"]))
                {
                    hfMeetingID.Value = Request.QueryString["meetingid"];
                }
                else
                {
                    lblMessage.Text = "No Meeting ID found!";
                    lblMessage.CssClass = "text-danger";
                }
            }
        }

        protected void btnTap_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(hfMeetingID.Value) || string.IsNullOrEmpty(txtCardSerial.Text))
            {
                lblMessage.Text = "Meeting ID or Card Serial missing!";
                lblMessage.CssClass = "text-danger";
                return;
            }

            using (SqlConnection con = new SqlConnection(connStr))
            {
                SqlCommand cmd = new SqlCommand("sp_TapAttendance", con);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@meetingid", hfMeetingID.Value);
                cmd.Parameters.AddWithValue("@cardserialno", txtCardSerial.Text);
                cmd.Parameters.AddWithValue("@tapType", rblTapType.SelectedValue);

                con.Open();
                var result = cmd.ExecuteScalar();
                lblMessage.Text = result != null ? result.ToString() : "No response from server.";
            }

            txtCardSerial.Text = "";
        }
    }
}


---

‚úÖ Now the user must explicitly choose Tap In or Tap Out via radio buttons.
‚úÖ The stored procedure enforces the logic (no double Tap In, no Tap Out without Tap In).


---

Do you also want me to make the radio buttons auto-selected (e.g., default to Tap In if no record exists, Tap Out if already tapped in)?


---
Update 11:48 AM

Perfect üëç now we‚Äôll extend the tapping page to also show a list of attendees for that meeting.

Since you have another table tbl_EmployeeDetails (cardserialno, fname, lastname), we can join it with tbl_participants to display Name, CardSerial, TimeIn, TimeOut.


---

1Ô∏è‚É£ SQL Stored Procedure for Attendance List

Create another stored procedure that fetches participants with employee details:

CREATE PROCEDURE sp_GetAttendanceList
    @meetingid INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT e.fname, e.lastname, p.cardserialno, p.timein, p.timeout
    FROM tbl_participants p
    INNER JOIN tbl_EmployeeDetails e ON p.cardserialno = e.cardserialno
    WHERE p.meetingid = @meetingid
    ORDER BY p.timein;
END


---

2Ô∏è‚É£ Update ASPX Page

We‚Äôll add a GridView below the form to display the list:

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="TappingAttendance.aspx.cs" Inherits="YourProject.TappingAttendance" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Attendance</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <div class="card shadow p-4">
            <h3 class="mb-3">Meeting Attendance Tapping</h3>

            <!-- Hidden Meeting ID -->
            <asp:HiddenField ID="hfMeetingID" runat="server" />

            <div class="mb-3">
                <label class="form-label">Card Serial Number</label>
                <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control" placeholder="Tap/Enter Card Serial No"></asp:TextBox>
            </div>

            <div class="mb-3">
                <label class="form-label">Select Tap Type</label><br />
                <asp:RadioButtonList ID="rblTapType" runat="server" RepeatDirection="Horizontal" CssClass="form-check">
                    <asp:ListItem Text="Tap In" Value="IN" Selected="True" />
                    <asp:ListItem Text="Tap Out" Value="OUT" />
                </asp:RadioButtonList>
            </div>

            <asp:Button ID="btnTap" runat="server" Text="Submit Tap" CssClass="btn btn-primary" OnClick="btnTap_Click" />

            <div class="mt-3">
                <asp:Label ID="lblMessage" runat="server" CssClass="fw-bold text-success"></asp:Label>
            </div>
        </div>

        <!-- Attendance List -->
        <div class="card shadow p-4 mt-4">
            <h4 class="mb-3">Attendance List</h4>
            <asp:GridView ID="gvAttendance" runat="server" CssClass="table table-bordered table-striped"
                AutoGenerateColumns="False">
                <Columns>
                    <asp:BoundField DataField="fname" HeaderText="First Name" />
                    <asp:BoundField DataField="lastname" HeaderText="Last Name" />
                    <asp:BoundField DataField="cardserialno" HeaderText="Card Serial" />
                    <asp:BoundField DataField="timein" HeaderText="Time In" DataFormatString="{0:MM/dd/yyyy HH:mm}" />
                    <asp:BoundField DataField="timeout" HeaderText="Time Out" DataFormatString="{0:MM/dd/yyyy HH:mm}" />
                </Columns>
            </asp:GridView>
        </div>
    </form>
</body>
</html>


---

3Ô∏è‚É£ Update Code-Behind

After each tap, reload the attendance list:

using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

namespace YourProject
{
    public partial class TappingAttendance : System.Web.UI.Page
    {
        string connStr = ConfigurationManager.ConnectionStrings["MyDBConn"].ConnectionString;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (!string.IsNullOrEmpty(Request.QueryString["meetingid"]))
                {
                    hfMeetingID.Value = Request.QueryString["meetingid"];
                    LoadAttendance();
                }
                else
                {
                    lblMessage.Text = "No Meeting ID found!";
                    lblMessage.CssClass = "text-danger";
                }
            }
        }

        protected void btnTap_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(hfMeetingID.Value) || string.IsNullOrEmpty(txtCardSerial.Text))
            {
                lblMessage.Text = "Meeting ID or Card Serial missing!";
                lblMessage.CssClass = "text-danger";
                return;
            }

            using (SqlConnection con = new SqlConnection(connStr))
            {
                SqlCommand cmd = new SqlCommand("sp_TapAttendance", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@meetingid", hfMeetingID.Value);
                cmd.Parameters.AddWithValue("@cardserialno", txtCardSerial.Text);
                cmd.Parameters.AddWithValue("@tapType", rblTapType.SelectedValue);

                con.Open();
                var result = cmd.ExecuteScalar();
                lblMessage.Text = result != null ? result.ToString() : "No response from server.";
            }

            txtCardSerial.Text = "";

            // Refresh attendance list
            LoadAttendance();
        }

        private void LoadAttendance()
        {
            using (SqlConnection con = new SqlConnection(connStr))
            {
                SqlCommand cmd = new SqlCommand("sp_GetAttendanceList", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@meetingid", hfMeetingID.Value);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                gvAttendance.DataSource = dt;
                gvAttendance.DataBind();
            }
        }
    }
}


---

‚úÖ Now your tapping page will:

1. Allow Tap In / Tap Out selection


2. Record attendance via sp_TapAttendance


3. Show a live attendance list with employee names (tbl_EmployeeDetails)




---

Would you like me to also make the GridView refresh automatically every few seconds (like a live monitor) without reloading the whole page?


---
01:32 PM
Nice idea üëç instead of just showing plain text, let‚Äôs make the tap response message appear as a Bootstrap alert box (alert-success, alert-danger, etc).

We‚Äôll:

Wrap the label in a Bootstrap alert <div>

Dynamically set its CSS class in C# depending on the result



---

1Ô∏è‚É£ ASPX (Replace Label with Alert Placeholder)

<div class="mt-3">
    <asp:Panel ID="pnlAlert" runat="server" Visible="false" CssClass="alert" role="alert">
        <asp:Label ID="lblMessage" runat="server"></asp:Label>
    </asp:Panel>
</div>


---

2Ô∏è‚É£ Code-Behind (Set Alert Style)

Update your btnTap_Click handler:

protected void btnTap_Click(object sender, EventArgs e)
{
    if (string.IsNullOrEmpty(hfMeetingID.Value) || string.IsNullOrEmpty(txtCardSerial.Text))
    {
        ShowAlert("Meeting ID or Card Serial missing!", "danger");
        return;
    }

    using (SqlConnection con = new SqlConnection(connStr))
    {
        SqlCommand cmd = new SqlCommand("sp_TapAttendance", con);
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Parameters.AddWithValue("@meetingid", hfMeetingID.Value);
        cmd.Parameters.AddWithValue("@cardserialno", txtCardSerial.Text);
        cmd.Parameters.AddWithValue("@tapType", rblTapType.SelectedValue);

        con.Open();
        var result = cmd.ExecuteScalar();
        string message = result != null ? result.ToString() : "No response from server.";

        // Decide alert color
        if (message.Contains("successfully"))
            ShowAlert(message, "success"); // green
        else
            ShowAlert(message, "warning"); // yellow/orange
    }

    txtCardSerial.Text = "";
    LoadAttendance();
}

private void ShowAlert(string message, string type)
{
    pnlAlert.Visible = true;
    lblMessage.Text = message;
    pnlAlert.CssClass = "alert alert-" + type; // ex: alert-success, alert-warning, alert-danger
}


---

‚úÖ Example Results:

Tap In recorded successfully! ‚Üí Green alert (alert-success)

Attendance already completed. ‚Üí Yellow alert (alert-warning)

Meeting ID or Card Serial missing! ‚Üí Red alert (alert-danger)



---

Do you want me to also add a fade-out effect so the alert disappears automatically after a few seconds?

---
08/23/25
Great üëç let‚Äôs add a manual close button (√ó) to the alert so the user can dismiss it anytime, while still keeping the auto-fade after 3 seconds.


---

1Ô∏è‚É£ ASPX ‚Äì Update Alert Panel

We add the Bootstrap dismiss button inside the alert:

<div class="mt-3">
    <asp:Panel ID="pnlAlert" runat="server" Visible="false" CssClass="alert alert-dismissible fade show" role="alert">
        <asp:Label ID="lblMessage" runat="server"></asp:Label>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </asp:Panel>
</div>

<!-- Script for auto fade out -->
<script type="text/javascript">
    function fadeOutAlert() {
        var alertBox = document.getElementById('<%= pnlAlert.ClientID %>');
        if (alertBox) {
            setTimeout(function () {
                alertBox.classList.add("fade");
                alertBox.classList.remove("show");
                setTimeout(function () {
                    alertBox.style.display = "none";
                }, 500); // wait for fade animation
            }, 3000); // alert visible for 3 sec
        }
    }
</script>


---

2Ô∏è‚É£ Code-Behind ‚Äì Keep ShowAlert Helper

No change needed except ensuring we include the right classes:

private void ShowAlert(string message, string type)
{
    pnlAlert.Visible = true;
    lblMessage.Text = message;
    pnlAlert.CssClass = "alert alert-" + type + " alert-dismissible fade show"; 

    // trigger fadeOutAlert after rendering
    ScriptManager.RegisterStartupScript(this, this.GetType(), "fadeAlert", "fadeOutAlert();", true);
}


---

‚úÖ Now your alert box will:

Show with Bootstrap styles (success, warning, danger)

Auto fade out after 3 seconds

Allow manual dismissal with a close (√ó) button



---

‚ö° Do you also want me to make the alert position fixed at the top-right corner (like a toast notification) instead of inline below the form?








