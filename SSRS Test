Existing button code aspx:
<asp:Button ID="btnViewAttendees" runat="server" CssClass="btn btn-info text-white me-2 w-auto"
                                Text="View Attendees" OnClick="btnViewAttendees_Click" />

Code behind:
        protected void btnViewAttendees_Click(object sender, EventArgs e)
        {
            string meetingId = hfMeetingID.Value; // assuming it's stored
            Response.Redirect($"viewattendees.aspx?meetingId={meetingId}");
        }

SSRS link:
http://192.12.52.232/reports/report/Reports/Attendance%20Tapping/Meeting_Attendance_Report2


-- 

Perfect üëç ‚Äî here‚Äôs your final version that opens your SSRS report in a new browser tab when the button is clicked:


---

‚úÖ ASPX Button

<asp:Button ID="btnViewAttendees" runat="server" 
    CssClass="btn btn-info text-white me-2 w-auto"
    Text="View Attendees" 
    OnClick="btnViewAttendees_Click" />


---

‚úÖ Code-behind (C#)

protected void btnViewAttendees_Click(object sender, EventArgs e)
{
    string meetingId = hfMeetingID.Value; // Your hidden field that stores the Meeting ID

    // SSRS report base URL
    string reportUrl = "http://192.12.52.232/reports/report/Reports/Attendance%20Tapping/Meeting_Attendance_Report2";

    // Append parameter (change 'MeetingID' to match your SSRS parameter name)
    string fullUrl = $"{reportUrl}?MeetingID={meetingId}";

    // Open report in a new browser tab
    string script = $"window.open('{fullUrl}', '_blank');";
    ClientScript.RegisterStartupScript(this.GetType(), "openReport", script, true);
}


---

üß© Notes:

Make sure your SSRS report parameter name (MeetingID) matches the one used inside the report.

If your report requires authentication, ensure the browser session is already authenticated in SSRS (or set SSRS to allow Windows authentication).



---

Would you like the report to auto-render immediately (skipping the SSRS parameter prompt page)? I can show how to include that option (using rs:Command=Render).


---


An attempt was made to set a report parameter 'MeetingID' that is not defined in this report. (rsUnknownReportParameter)

-- 

aspx code:
<asp:LinkButton ID="btnViewMeeting" runat="server"
    CommandName="ViewAttendees"
    CommandArgument='<%# Container.DataItemIndex %>'
    CssClass="btn btn-sm text-primary me-1"
    ToolTip="View Attendees">
    <i class="far fa-eye"></i> View Attendees
</asp:LinkButton>

code behind:
        protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "ViewAttendees")
            {
                //string meetingId = e.CommandArgument.ToString();


                int rowIndex = Convert.ToInt32(e.CommandArgument);
                GridViewRow row = gvMeetings.Rows[rowIndex];

                // Get values from GridView cells (adjust index if needed)
                string meetingId = gvMeetings.DataKeys[rowIndex].Value.ToString();
                string title = row.Cells[2].Text;   // Title column
                string start = row.Cells[3].Text;   // Start Date column
                string end = row.Cells[4].Text;     // End Date column
                string location = row.Cells[5].Text; // Venue column
                //string status = row.Cells[6].Text; // Status column
                Label lblStatus = (Label)row.FindControl("lblStatus");
                string status = lblStatus.Text;


                // Save to Session
                Session["MeetingId"] = meetingId;
                Session["Title"] = title;
                Session["StartTime"] = start;
                Session["EndTime"] = end;
                Session["Location"] = location;

                Response.Redirect("viewattendees.aspx?MeetingId=" + meetingId);
            }
        }



---

Excellent ‚Äî that‚Äôs a LinkButton inside a data-bound control (like a GridView or Repeater), so instead of using OnClick, you‚Äôll handle the RowCommand (GridView) or ItemCommand (Repeater) event on the parent control.

Let‚Äôs walk through how to make it open your SSRS report in a new tab while passing the MeetingID from your data row. üëá


---

‚úÖ Example for GridView

üß± ASPX

<asp:GridView ID="gvMeetings" runat="server" AutoGenerateColumns="False" 
    OnRowCommand="gvMeetings_RowCommand">
    <Columns>
        <asp:TemplateField HeaderText="Actions">
            <ItemTemplate>
                <asp:LinkButton ID="btnViewMeeting" runat="server"
                    CommandName="ViewAttendees"
                    CommandArgument='<%# Eval("MeetingID") %>'
                    CssClass="btn btn-sm text-primary me-1"
                    ToolTip="View Attendees">
                    <i class="far fa-eye"></i> View Attendees
                </asp:LinkButton>
            </ItemTemplate>
        </asp:TemplateField>
    </Columns>
</asp:GridView>

üí° Here, CommandArgument='<%# Eval("MeetingID") %>' passes your meeting ID value directly from the data source.


---

üíª Code-behind (C#)

protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "ViewAttendees")
    {
        string meetingId = e.CommandArgument.ToString();

        // SSRS base URL
        string reportUrl = "http://192.12.52.232/reports/report/Reports/Attendance%20Tapping/Meeting_Attendance_Report2";

        // Use your actual SSRS parameter name here
        string fullUrl = $"{reportUrl}?meeting_id={meetingId}&rs:Command=Render";

        // Open in a new tab
        string script = $"window.open('{fullUrl}', '_blank');";
        ClientScript.RegisterStartupScript(this.GetType(), "openReport", script, true);
    }
}


---

‚úÖ Example for Repeater (same logic)

If you‚Äôre using a Repeater, handle it in ItemCommand instead:

<asp:Repeater ID="rptMeetings" runat="server" OnItemCommand="rptMeetings_ItemCommand">
    <ItemTemplate>
        <asp:LinkButton ID="btnViewMeeting" runat="server"
            CommandName="ViewAttendees"
            CommandArgument='<%# Eval("MeetingID") %>'
            CssClass="btn btn-sm text-primary me-1">
            <i class="far fa-eye"></i> View Attendees
        </asp:LinkButton>
    </ItemTemplate>
</asp:Repeater>

protected void rptMeetings_ItemCommand(object source, RepeaterCommandEventArgs e)
{
    if (e.CommandName == "ViewAttendees")
    {
        string meetingId = e.CommandArgument.ToString();
        string reportUrl = "http://192.12.52.232/reports/report/Reports/Attendance%20Tapping/Meeting_Attendance_Report2";
        string fullUrl = $"{reportUrl}?meeting_id={meetingId}&rs:Command=Render";

        string script = $"window.open('{fullUrl}', '_blank');";
        ClientScript.RegisterStartupScript(this.GetType(), "openReport", script, true);
    }
}


---

‚úÖ Summary

You are using	Event to handle	CommandArgument contains	Open SSRS report

GridView	RowCommand	Eval("MeetingID")	With window.open()
Repeater	ItemCommand	Eval("MeetingID")	With window.open()



---

Would you like the report to open filtered by multiple parameters (e.g. MeetingID + DateRange)? I can show how to append more SSRS parameters to the URL easily.

