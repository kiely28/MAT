<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="meetingattendance.aspx.cs" Inherits="meetingattendance.meetingattendance" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Meeting Attendance Tapping</title>

    <!-- Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Nunito">

    <%--<!-- Custom styles -->
    <link href="/Content/styles.css" rel="stylesheet" />--%>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <%--<link href="-https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />--%>

    <!-- Font Awesome Free 5.15.4 -->
    <%--<script src="/Scripts/all.min.js"></script>--%>

    <%--<script src="-https://code.jquery.com/jquery-3.6.0.min.js"></script>--%>

    <style>
        .custom-input {
            font-size: 2rem;
            padding: 1rem 1.5rem;
            /*font-family: 'nunito', sans-serif;*/
        }

        .form-check input[type="radio"] {
            width: 1.5em;
            height: 1.5em;
        }

        .form-check label {
            font-size: 1.25rem;
            padding-left: 0.5em;
        }

        .btn-lg-custom {
            font-size: 2rem;
            padding: 1.2rem 2rem;
            border-radius: 0.5rem;
        }
    </style>
</head>

<body class="sb-nav-fixed">
    <form id="form1" runat="server">
        <!-- Top Navbar -->
        <nav class="navbar navbar-expand" style="background-color: #10218B;" data-bs-theme="dark">
            <div class="container-fluid">
                <a class="navbar-brand ps-3" href="home.aspx" style="font-weight: bold; font-family: nunito; font-size: 17px;">Meeting Attendance Tapping</a>
                <!-- Sidebar Toggle-->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item"><a class="nav-link" href="home.aspx">Dashboard</a></li>
                        <li class="nav-item"><a class="nav-link active" href="meetinglist.aspx">Meetings</a></li>
                        <%--<li class="nav-item"><a class="nav-link" href="#">History Logs</a></li>--%>
                    </ul>
                </div>
                <!-- User Dropdown -->
                <ul class="navbar-nav ms-auto me-3">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-user fa-fw"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                            <%--<li><a class="dropdown-item" href="#">Logout</a></li>--%>
                            <li>
                                <asp:LinkButton ID="btnLogout" runat="server" CssClass="dropdown-item" OnClick="btnLogout_Click">Logout</asp:LinkButton>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>



        <main>
            <div class="container-fluid px-4">

                <h1 class="mt-3">
                    <asp:Label ID="lblTitle" runat="server" Text="Title"></asp:Label>
                </h1>
                <ol class="breadcrumb mb-4 mt-3">
                    <li class="breadcrumb-item active">
                        <asp:Label ID="lblDateTime" runat="server" Text="Date / Time"></asp:Label>
                    </li>
                </ol>

                <!-- Hidden Meeting ID -->
                <asp:HiddenField ID="hfMeetingID" runat="server" />

                <div class="row">
                    <div class="col-3 col-lg-3 mb-3">
                        <input type="radio" class="btn-check" name="tapMode" id="radioIn" value="In" autocomplete="off">
                        <label class="btn btn-outline-primary w-100 btn-lg btn-lg-custom" for="radioIn">In</label>
                    </div>
                    <div class="col-3 col-lg-3 mb-3">
                        <input type="radio" class="btn-check" name="tapMode" id="radioOut" value="Out" autocomplete="off">
                        <label class="btn btn-outline-secondary w-100 btn-lg btn-lg-custom" for="radioOut">Out</label>
                    </div>
                    <div class="col-6 d-flex justify-content-end">
                        <div>
                            <asp:Button ID="btnViewAttendees" runat="server" CssClass="btn btn-info text-white me-2 w-auto"
                                Text="View Attendees" OnClick="btnViewAttendees_Click" />
                            <asp:Button ID="btnEndMeeting" runat="server" CssClass="btn btn-danger w-auto"
                                Text="End Meeting" OnClick="btnEndMeeting_Click" />
                        </div>
                    </div>
                </div>

                <!-- Hidden field to hold selected mode -->
                <asp:HiddenField ID="hfTapMode" runat="server" />

                <div class="mb-3">
                    <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control custom-input"
                        placeholder="Place your ID card on the reader" TextMode="Password"
                        AutoPostBack="true" OnTextChanged="txtCardSerial_TextChanged"></asp:TextBox>
                </div>

                <div class="mt-3">
                    <asp:Panel ID="pnlAlert" runat="server" Visible="false"
                        CssClass="alert alert-dismissible fade show" role="alert">
                        <h5 class="alert-heading">
                            <asp:Label ID="lblAlertHeading" runat="server"></asp:Label>
                        </h5>


                        <p class="mb-0 fs-5">
                            <asp:Label ID="lblAlertName" runat="server"></asp:Label>
                        </p>
                        <p class="fs-6">
                            <asp:Label ID="lblAlertDept" runat="server"></asp:Label>
                        </p>
                        <p class="mb-0">
                            <asp:Label ID="lblAlertDateTime" runat="server"></asp:Label>
                        </p>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </asp:Panel>
                </div>

                <!-- Auto fade-out -->
                <script type="text/javascript">
                    function fadeOutAlert() {
                        var alertBox = document.getElementById('<%= pnlAlert.ClientID %>');
                        if (alertBox && alertBox.style.display !== "none") {
                            setTimeout(function () {
                                var bsAlert = new bootstrap.Alert(alertBox);
                                bsAlert.close();
                            }, 3000); // disappear after 3s
                        }
                    }
                </script>





            </div>
        </main>
    </form>

    <script type="text/javascript">
        // When user changes radio button, update hidden field
        document.querySelectorAll('input[name="tapMode"]').forEach(function (radio) {
            radio.addEventListener('change', function () {
                document.getElementById('<%= hfTapMode.ClientID %>').value = this.value;
            });
        });

        // On page load, restore the radio button from hidden field
        document.addEventListener("DOMContentLoaded", function () {
            var savedMode = document.getElementById('<%= hfTapMode.ClientID %>').value;

            if (!savedMode) {
                savedMode = "In"; // default
                document.getElementById('<%= hfTapMode.ClientID %>').value = savedMode;
            }

            // Uncheck all radios first
            document.querySelectorAll('input[name="tapMode"]').forEach(function (r) {
                r.checked = false;
            });

            // Check only the saved one
            var radioToCheck = document.getElementById("radio" + savedMode);
            if (radioToCheck) {
                radioToCheck.checked = true;
            }
        });
    </script>

    <!-- Scripts already in your footer -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <%--<script src="/Scripts/scripts.js"></script>--%>
    <%--<script src="/Scripts/simple-datatables.js"></script>
    <script src="/Scripts/datatables-simple-demo.js"></script>--%>
</body>
</html>


-- Code behind

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing.Drawing2D;
using System.EnterpriseServices.CompensatingResourceManager;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using static System.Net.Mime.MediaTypeNames;

namespace meetingattendance
{
    public partial class meetingattendance : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //if (!IsPostBack)
            //{
            //    string meetingId = Request.QueryString["meetingId"];
            //    if (!string.IsNullOrEmpty(meetingId))
            //    {
            //        LoadMeetingDetails(meetingId);
            //    }
            //    else
            //    {
            //        lblTitle.Text = "Invalid Meeting";
            //        lblDateTime.Text = "";
            //    }
            //}

            if (Session["Username"] == null) // or any session you set at login
            {
                Response.Redirect("/login.aspx");
                return;
            }

            if (!IsPostBack)
            {
                if (Session["MeetingId"] == null)
                {
                    Response.Redirect("meetinglist.aspx");
                    return;
                }

                hfMeetingID.Value = Session["MeetingId"].ToString();
                lblTitle.Text = Session["Title"].ToString();
                //lblStart.Text = Session["StartTime"].ToString();
                //lblEnd.Text = Session["EndTime"].ToString();
                //lblLocation.Text = Session["Location"].ToString();

                lblDateTime.Text = Session["Location"].ToString() + " / " +
                   Convert.ToDateTime(Session["StartTime"]).ToString("MMMM dd, yyyy hh:mm tt") + " - " +
                   Convert.ToDateTime(Session["EndTime"]).ToString("hh:mm tt");

            }
            // Always focus on the textbox after page load or postback
            Page.SetFocus(txtCardSerial);
        }

        //private void LoadMeetingDetails(string meetingId)
        //{
        //    string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        //    using (SqlConnection conn = new SqlConnection(connStr))
        //    using (SqlCommand cmd = new SqlCommand("MA_GetMeetingDetails", conn))
        //    {
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@MeetingId", meetingId);

        //        conn.Open();
        //        SqlDataReader reader = cmd.ExecuteReader();
        //        if (reader.Read())
        //        {
        //            lblTitle.Text = reader["Title"].ToString();
        //            //lblDateTime.Text = $"{Convert.ToDateTime(reader["StartDateTime"]):MM-dd-yyyy hh:mm tt} - {Convert.ToDateTime(reader["EndDateTime"]):MM-dd-yyyy hh:mm tt}";
        //            lblDateTime.Text = $"{reader["Venue"]} / {Convert.ToDateTime(reader["StartDateTime"]):MMMM dd, yyyy hh:mm tt} - {Convert.ToDateTime(reader["EndDateTime"]):hh:mm tt}";
        //            hfMeetingID.Value = meetingId;
        //        }
        //        else
        //        {
        //            lblTitle.Text = "Meeting not found";
        //            lblDateTime.Text = "";
        //        }
        //    }
        //}

        protected void btnViewAttendees_Click(object sender, EventArgs e)
        {
            string meetingId = hfMeetingID.Value; // assuming it's stored
            Response.Redirect($"viewattendees.aspx?meetingId={meetingId}");
        } 


        private void ShowAlert(string heading, string fullName, string dept, string cssClass)
        {
            pnlAlert.Visible = true;
            pnlAlert.CssClass = $"alert {cssClass} alert-dismissible fade show";

            lblAlertHeading.Text = heading;
            lblAlertName.Text = fullName;
            lblAlertDept.Text = dept;
            //lblAlertDateTime.Text = DateTime.Now.ToString("MMMM dd, yyyy hh:mm:ss tt");

            if (pnlAlert.CssClass == "alert alert-danger alert-dismissible fade show" || pnlAlert.CssClass == "alert alert-warning alert-dismissible fade show")
            {
                lblAlertDateTime.Text = "";
            }
            else
            {
                lblAlertDateTime.Text = DateTime.Now.ToString("MMMM dd, yyyy hh:mm:ss tt");
            }

            // auto fade-out
            ScriptManager.RegisterStartupScript(this, GetType(), "fadeOutAlert", "fadeOutAlert();", true);
        }


        protected void txtCardSerial_TextChanged(object sender, EventArgs e)
        {
            string cardSerial = txtCardSerial.Text.Trim();
            string meetingId = hfMeetingID.Value;

            // Prefer real posted radio value; fallback to the hidden field (hfTapMode)
            string tapMode = Request.Form["tapMode"];
            if (string.IsNullOrEmpty(tapMode))
                tapMode = hfTapMode.Value ?? "In";

            if (string.IsNullOrEmpty(cardSerial))
            {
                ShowAlert("Invalid Tap", "Please place your card on the reader.", "", "alert-warning");
                return;
            }

            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            try
            {
                using (SqlConnection conn = new SqlConnection(connStr))
                {
                    conn.Open();

                    // Validate employee first
                    string empName = "";
                    string dept = "";

                    using (SqlCommand cmd = new SqlCommand("MA_CheckEmployeeByCard", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (!reader.Read())
                            {
                                txtCardSerial.Text = "";
                                ShowAlert("Card Not Registered", "", "", "alert-danger");
                                return;
                            }
                            empName = (reader["FirstName"] ?? "").ToString().Trim() + " " + (reader["MiddleName"] ?? "").ToString().Trim() + " " + (reader["LastName"] ?? "").ToString().Trim();
                            dept = (reader["DivisionName"] ?? "").ToString().Trim() + " " + (reader["DepartmentName"] ?? "").ToString().Trim() + " " + (reader["SectionName"] ?? "").ToString().Trim();
                        }
                    }

                    if (tapMode.Equals("In", StringComparison.OrdinalIgnoreCase))
                    {
                        using (SqlCommand insertCmd = new SqlCommand("MA_InsertAttendee", conn))
                        {
                            insertCmd.CommandType = CommandType.StoredProcedure;
                            insertCmd.Parameters.AddWithValue("@MeetingId", meetingId);
                            insertCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

                            //object resObj = insertCmd.ExecuteScalar();
                            //int res = (resObj != null && int.TryParse(resObj.ToString(), out int tmp)) ? tmp : -1;

                            using (SqlDataReader reader = insertCmd.ExecuteReader())
                            {
                                if (reader.Read())
                                {
                                    int result = Convert.ToInt32(reader["Result"]);

                                    if (result == 0)
                                        ShowAlert("Already Tapped In", "", "", "alert-danger");
                                    else if (result == 1)
                                        ShowAlert("You have tapped in successfully!", empName, dept, "alert-success");
                                    else
                                        ShowAlert("Tap-in failed", "", "", "alert-danger");
                                }
                            }

                            //if (res == 0)
                            //    ShowAlert("Already Tapped In", empName, dept, "alert-warning");
                            //else if (res == 1)
                            //    ShowAlert("You have tapped in successfully!", empName, dept, "alert-success");
                            //else
                            //    ShowAlert("Tap-in failed", empName, dept, "alert-danger");
                        }
                    }
                    else // Out
                    {
                        int rowsAffected = 0;

                        using (SqlCommand updateCmd = new SqlCommand("MA_UpdateAttendeeTimeout", conn))
                        {
                            updateCmd.CommandType = CommandType.StoredProcedure;
                            updateCmd.Parameters.AddWithValue("@MeetingId", meetingId);
                            updateCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

                            //object result = updateCmd.ExecuteScalar();
                            //int rows = (result != null && int.TryParse(result.ToString(), out int r)) ? r : 0;

                            //conn.Open();
                            rowsAffected = updateCmd.ExecuteNonQuery(); // This returns the number of rows affected

                            if (rowsAffected > 0)
                                ShowAlert("You have tapped out successfully!", empName, dept, "alert-success");
                            else
                                ShowAlert("Already tapped out or no tap-in found", "", "", "alert-danger");
                        }
                    }

                    // Reset input and focus
                    txtCardSerial.Text = "";
                    ScriptManager.RegisterStartupScript(this, GetType(), "setFocus",
                        $"document.getElementById('{txtCardSerial.ClientID}').focus();", true);
                }
            }
            catch (Exception ex)
            {
                // Temporary debugging; in production log this instead
                ShowAlert("Error", ex.Message, "", "alert-danger");
            }
        }


        protected void btnEndMeeting_Click(object sender, EventArgs e)
        {
            string meetingId = hfMeetingID.Value; // Or however you store the current MeetingId

            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
            using (SqlConnection con = new SqlConnection(connStr))
            {
                using (SqlCommand cmd = new SqlCommand("MA_EndMeeting", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MeetingId", meetingId);

                    con.Open();
                    int rows = cmd.ExecuteNonQuery();

                    if (rows > 0)
                    {
                        // Store a session flag
                        Session["MeetingEnded"] = "true";

                        // Redirect to meeting list
                        Response.Redirect("meetinglist.aspx");
                    }
                    else
                    {
                        ShowAlert("Unable to end meeting. Please check Meeting ID.", "", "", "alert-danger");
                    }
                }
            }
        }

        protected void btnLogout_Click(object sender, EventArgs e)
        {
            Session.Clear();
            Session.Abandon();

            if (Request.Cookies[".ASPXAUTH"] != null)
            {
                HttpCookie authCookie = new HttpCookie(".ASPXAUTH");
                authCookie.Expires = DateTime.Now.AddDays(-1);
                Response.Cookies.Add(authCookie);
            }

            Response.Redirect("/login.aspx");
        }

    }
}


-- Update

Got it 👍 thanks for clarifying.

Right now, in your Tap In block, you correctly reset and re-focus the txtCardSerial.
But in your Tap Out (else part), you also clear it but you don’t re-focus in all cases consistently.

Here’s the relevant part of your code:

else // Out
{
    int rowsAffected = 0;

    using (SqlCommand updateCmd = new SqlCommand("MA_UpdateAttendeeTimeout", conn))
    {
        updateCmd.CommandType = CommandType.StoredProcedure;
        updateCmd.Parameters.AddWithValue("@MeetingId", meetingId);
        updateCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

        rowsAffected = updateCmd.ExecuteNonQuery();

        if (rowsAffected > 0)
            ShowAlert("You have tapped out successfully!", empName, dept, "alert-success");
        else
            ShowAlert("Already tapped out or no tap-in found", "", "", "alert-danger");
    }
}

// Reset input and focus
txtCardSerial.Text = "";
ScriptManager.RegisterStartupScript(this, GetType(), "setFocus",
    $"document.getElementById('{txtCardSerial.ClientID}').focus();", true);

Why focus sometimes fails

ScriptManager.RegisterStartupScript with the same key "setFocus" can get overridden if you call it more than once on the same postback.

In the Tap Out flow, you only register focus once at the very end.

If another script (like fadeOutAlert()) runs after it, the focus may get lost.



---

✅ Fix Option 1: Use a unique key for each focus script

ScriptManager.RegisterStartupScript(this, GetType(), Guid.NewGuid().ToString(),
    $"document.getElementById('{txtCardSerial.ClientID}').focus();", true);

This ensures the focus script always runs, because each registration has a unique key.


---

✅ Fix Option 2: Force focus on every page load

In Page_Load, after your existing line:

Page.SetFocus(txtCardSerial);

also add:

ScriptManager.RegisterStartupScript(this, GetType(), "focusOnLoad",
    $"document.getElementById('{txtCardSerial.ClientID}').focus();", true);

That way, even after Tap Out, the field regains focus.


---

✅ Fix Option 3: Client-side only (simpler)

At the bottom of your .aspx page, add:

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById('<%= txtCardSerial.ClientID %>').focus();
    });
</script>

This guarantees focus every time the page reloads.


---

👉 If you want the smoothest tap-in / tap-out flow, I’d recommend Option 1 (unique key per focus script), because it guarantees focus after every postback without interfering with your alerts.

Do you want me to rewrite your txtCardSerial_TextChanged method with the unique focus script fix applied?

