I checked your code (both ASPX and code-behind). üëç
Here are my findings and suggestions to improve/correct it:


---

‚úÖ Good Points

Well-structured GridView with template fields, proper key (DataKeyNames="MeetingId").

Stored procedures for insert, update, delete, and status updates ‚Üí clean DB handling.

AJAX WebMethod (GetMeetingById) ‚Üí nice approach for edit modal.

Bootstrap 5 integration ‚Üí proper modal and alerts.

Status badges dynamically styled in RowDataBound.



---

‚ö†Ô∏è Issues & Fixes

1. Duplicate/Conflicting JS Libraries

You are loading simple-datatables.js and also using DataTables ($('#gvMeetings').DataTable()).

These are two different libraries and conflict with each other.


üëâ Fix:
Decide which one to use:

If you want Bootstrap-friendly DataTables ‚Üí use jQuery DataTables.

If you want lightweight ‚Üí keep simple-datatables and remove $('#gvMeetings').DataTable().


Example (keep only one):

<!-- If you keep DataTables -->
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
<link href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css" rel="stylesheet" />

Or if you keep simple-datatables, remove this block:

$('#gvMeetings').DataTable({...});


---

2. Case-sensitive Column Name Issue

You mix MeetingId vs MeetingID in some places:

CommandArgument='<%# Eval("MeetingId") %>'
onclick="openStartModal('<%# Eval("MeetingID") %>')"

If your DB/SP returns MeetingId (not MeetingID), that second line will throw undefined error.

üëâ Fix: use one consistent casing everywhere:

onclick="openStartModal('<%# Eval("MeetingId") %>')"


---

3. Modal Close for Update

In btnUpdate_Click, you call:

ScriptManager.RegisterStartupScript(this, this.GetType(), "updateSuccess",
    "closeEditModal(); showSuccessAlert('Meeting updated successfully!');", true);

But you don‚Äôt have a closeEditModal() JS function.

üëâ Fix: Add function:

function closeEditModal() {
    var modalEl = document.getElementById('editMeetingModal');
    var modal = bootstrap.Modal.getInstance(modalEl);
    if (modal) modal.hide();
}


---

4. Auto-hide Success Panel

Your showSuccessAlert() only handles the Add New modal.
For update/delete, you reuse it but pass a message ‚Äî yet your function doesn‚Äôt accept a parameter.

üëâ Fix:
Update it like this:

function showSuccessAlert(message) {
    var alertBox = document.getElementById('<%= pnlSuccess.ClientID %>');
    if (alertBox) {
        alertBox.querySelector("div").innerText = message || "Saved successfully.";
        alertBox.style.display = 'block';
        setTimeout(function () {
            var bsAlert = new bootstrap.Alert(alertBox);
            bsAlert.close();
        }, 3000);
    }
}


---

5. Date Validation

Your client-side validator (validateDateRange) is declared but never attached.
You can add this inside the modal:

<asp:CustomValidator ID="cvDateRange" runat="server" 
    ControlToValidate="txtEndDateTime"
    ClientValidationFunction="validateDateRange"
    ErrorMessage="End date must be greater than start date."
    CssClass="text-danger" Display="Dynamic"
    ValidationGroup="CreateMeeting" />


---

6. Row Coloring in DataTables

Inside:

var startDate = new Date(data[4]);
var status = data[7];

But your GridView columns order:
0 = index, 1 = MeetingId, 2 = Title, 3 = StartDate, 4 = EndDate, 5 = Venue, 6 = Status.

So data[4] = EndDate, not StartDate.
üëâ Fix:

var startDate = new Date(data[3]); // StartDate is column 3
var status = data[6]; // Status column


---

7. Security

You are still hardcoding string currentUser = "B014172";
üëâ Replace with Session["Username"] or User.Identity.Name once authentication is ready.



---

üöÄ Suggested Next Steps

1. Pick either simple-datatables or jQuery DataTables ‚Üí remove conflicts.


2. Fix casing (MeetingId vs MeetingID).


3. Add missing modal JS (closeEditModal).


4. Enhance showSuccessAlert() to accept messages.


5. Attach date range validator.


6. Correct DataTable column indexes.


7. Replace hardcoded user.




---

Do you want me to refactor your code so it only uses DataTables.js (not simple-datatables) with correct row coloring, or do you prefer to keep simple-datatables for lighter weight?




-----------

Got it ‚úÖ Two separate modals will make the flow clearer ‚Äî one for Start Meeting and another for Delete Meeting.
Here‚Äôs how you can do it:


---

üü¢ Start Meeting Modal (ASPX)

<!-- Start Meeting Modal -->
<div class="modal fade" id="startMeetingModal" tabindex="-1" aria-labelledby="startMeetingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="startMeetingModalLabel">Start Meeting</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Do you want to start this meeting?</p>
                <asp:HiddenField ID="hfStartMeetingId" runat="server" />
            </div>
            <div class="modal-footer">
                <asp:Button ID="btnStartMeeting" runat="server" CssClass="btn btn-success"
                    Text="Start" OnClick="btnStartMeeting_Click" />
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


---

üî¥ Delete Meeting Modal (ASPX)

<!-- Delete Meeting Modal -->
<div class="modal fade" id="deleteMeetingModal" tabindex="-1" aria-labelledby="deleteMeetingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteMeetingModalLabel">Delete Meeting</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this meeting?</p>
                <asp:HiddenField ID="hfDeleteMeetingId" runat="server" />
            </div>
            <div class="modal-footer">
                <asp:Button ID="btnDeleteConfirm" runat="server" CssClass="btn btn-danger"
                    Text="Delete" OnClick="btnDelete_Click" />
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


---

üéØ JavaScript (Open the Correct Modal)

// Open Start Meeting modal
function openStartModal(meetingId) {
    document.getElementById('<%= hfStartMeetingId.ClientID %>').value = meetingId;
    var modal = new bootstrap.Modal(document.getElementById('startMeetingModal'));
    modal.show();
}

// Open Delete Meeting modal
function openDeleteModal(meetingId) {
    document.getElementById('<%= hfDeleteMeetingId.ClientID %>').value = meetingId;
    var modal = new bootstrap.Modal(document.getElementById('deleteMeetingModal'));
    modal.show();
}


---

‚ö° Code-Behind (C#)

protected void btnStartMeeting_Click(object sender, EventArgs e)
{
    if (!string.IsNullOrEmpty(hfStartMeetingId.Value))
    {
        int meetingId = int.Parse(hfStartMeetingId.Value);

        using (SqlConnection conn = new SqlConnection(connStr))
        using (SqlCommand cmd = new SqlCommand("sp_UpdateMeetingStatus", conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@MeetingId", meetingId);
            cmd.Parameters.AddWithValue("@Status", "Ongoing");
            conn.Open();
            cmd.ExecuteNonQuery();
        }

        BindMeetings();

        // Redirect to attendance page
        Response.Redirect("meetingattendance.aspx?meetingId=" + meetingId);
    }
}

protected void btnDelete_Click(object sender, EventArgs e)
{
    if (!string.IsNullOrEmpty(hfDeleteMeetingId.Value))
    {
        int meetingId = int.Parse(hfDeleteMeetingId.Value);

        using (SqlConnection conn = new SqlConnection(connStr))
        using (SqlCommand cmd = new SqlCommand("sp_DeleteMeeting", conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@MeetingId", meetingId);
            conn.Open();
            cmd.ExecuteNonQuery();
        }

        BindMeetings();

        ScriptManager.RegisterStartupScript(this, this.GetType(), "deleteSuccess",
            "showSuccessAlert('Meeting deleted successfully!');", true);
    }
}


---

üñ±Ô∏è Example Buttons in GridView

<!-- Start Button -->
<asp:LinkButton ID="lnkStart" runat="server" CssClass="btn btn-success btn-sm"
    OnClientClick='<%# "openStartModal(" + Eval("MeetingId") + "); return false;" %>'>
    <i class="fas fa-play"></i> Start
</asp:LinkButton>

<!-- Delete Button -->
<asp:LinkButton ID="lnkDelete" runat="server" CssClass="btn btn-danger btn-sm"
    OnClientClick='<%# "openDeleteModal(" + Eval("MeetingId") + "); return false;" %>'>
    <i class="fas fa-trash"></i> Delete
</asp:LinkButton>


---

‚úÖ Now you‚Äôll have two separate confirmation modals:

Start Meeting ‚Üí changes status to Ongoing and redirects.

Delete Meeting ‚Üí removes the record.



---

Do you also want me to add a Bootstrap toast (bottom-right notification) for success messages instead of the current alert panel? That way, both start and delete actions can give a cleaner UI confirmation.

